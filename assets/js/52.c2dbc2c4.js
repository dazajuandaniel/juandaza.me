(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{369:function(e,a,t){"use strict";t.r(a);var r=t(42),s=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"terraform-learning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terraform-learning"}},[e._v("#")]),e._v(" Terraform Learning")]),e._v(" "),t("h2",{attrs:{id:"learning-presentation"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#learning-presentation"}},[e._v("#")]),e._v(" Learning Presentation")]),e._v(" "),t("iframe",{attrs:{src:"https://onedrive.live.com/embed?cid=42456911A7C9B1CB&resid=42456911A7C9B1CB%2132990&authkey=AKQrec1_VsHwX7U&em=2&wdAr=1.7777777777777777",width:"350px",height:"221px",frameborder:"0"}},[e._v("This is an embedded "),t("a",{attrs:{target:"_blank",href:"https://office.com"}},[e._v("Microsoft Office")]),e._v(" presentation, powered by "),t("a",{attrs:{target:"_blank",href:"https://office.com/webapps"}},[e._v("Office")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"what-is-terraform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-is-terraform"}},[e._v("#")]),e._v(" What is Terraform")]),e._v(" "),t("p",[e._v("Allows to write infrastructure as code.\nKeeps infrastructure in a certain state (compliant)")]),e._v(" "),t("ul",[t("li",[e._v("Tries to match it at all times")]),e._v(" "),t("li",[e._v("Makes infratructure auditable")])]),e._v(" "),t("p",[e._v("Ansible, Chef, Puppet, Saltstack focus on automating the installation and config of software.\nTerraform can automate provisioning the infrastructure itself.")]),e._v(" "),t("p",[e._v("Hardware (Terraform) -> Software (Ansible,etc)")]),e._v(" "),t("h2",{attrs:{id:"terraform-hcl-hashicorp-config-language"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#terraform-hcl-hashicorp-config-language"}},[e._v("#")]),e._v(" Terraform HCL (HashiCorp Config Language)")]),e._v(" "),t("p",[e._v("Interprets "),t("code",[e._v(".tf")]),e._v(" files")]),e._v(" "),t("h3",{attrs:{id:"variables-basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-basics"}},[e._v("#")]),e._v(" Variables Basics")]),e._v(" "),t("p",[t("code",[e._v("variable")]),e._v(" is a keyword to create variables:")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('variable "myvar" {\n    type = "string"\n    default = "hello terraform"\n}\n\n//Map of strings\n\nvariable "mymap" {\n    type = map(string)\n    default = {\n        mykey = "my value"\n        }\n}\n\nvariable "mylist" {\n    type = list\n    default = [1,2,3]\n}\n')])])]),t("p",[e._v("Enter the terraform console")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[e._v("terraform console\n")])])]),t("p",[e._v("and then run the following examples")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var.myvar\n//outputs 'hello terraform'\n\nvar.mymap\n//outputs '{\"mykey\" = \"my value\"}'\n\nvar.mymap[\"mykey\"]\n//outputs 'my value'\n\nvar.mylist\n//outputs [1,2,3]\n\nvar.mylist[0]\n//outputs 1\n\nelement(var.mylist,1)\n//outputs 2\n\nslice(var.mylist,0,1)\n//outputs [1,2]\n")])])]),t("p",[e._v("I can also create variables in files. E.g. "),t("code",[e._v("file.tfvars")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('AWS_REGION="eu-west-1"\n')])])]),t("p",[e._v("then, in the console I can do")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("var.AWS_REGION\n//outputs eu-west-1\n")])])]),t("p",[t("strong",[e._v("Terraform Simple Variable Types")])]),e._v(" "),t("ol",[t("li",[e._v("String")]),e._v(" "),t("li",[e._v("Number")]),e._v(" "),t("li",[e._v("Bool")])]),e._v(" "),t("p",[t("strong",[e._v("Terraform Complex Types")])]),e._v(" "),t("ol",[t("li",[e._v("list(type)\n"),t("ul",[t("li",[e._v("List: "),t("code",[e._v("[1,2,3]")])]),e._v(" "),t("li",[e._v("Is always ordered")])])]),e._v(" "),t("li",[e._v("Set(Type)\n"),t("ul",[t("li",[e._v("It's like a list but no order (given by user) is preserved, can only contain unique values")])])]),e._v(" "),t("li",[e._v("Map(type)\n"),t("ul",[t("li",[t("code",[e._v('{"key" = "value"}')])])])]),e._v(" "),t("li",[e._v("Tuple([])\n"),t("ul",[t("li",[e._v("Like a list but each element can have a different type")])])]),e._v(" "),t("li",[e._v("Object({})\n"),t("ul",[t("li",[e._v("Like a map but each element can have a different type")])])])]),e._v(" "),t("h3",{attrs:{id:"resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),t("p",[e._v("When creating a resource one needs to add a provider with the "),t("code",[e._v("provider")]),e._v(" keyword. The keyword "),t("code",[e._v("resource")]),e._v(" denotes a resource.")]),e._v(" "),t("p",[t("strong",[e._v("Syntax for a resource")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("resource <resource type> <name> {\n    <properties>\n}\n")])])]),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('provider "aws"{\n\n}\n\nresource "aws_instance" "example"{\n    ami = var.AMIS[var.AWS_REGION]\n    instance_type = "t2.micro"\n}\n')])])]),t("p",[e._v("an alternate notation is:")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('resource "aws_instance" "example"{\n    ami = ${var.AMIS[var.AWS_REGION]}\n    instance_type = "t2.micro"\n}\n')])])]),t("p",[t("strong",[e._v("Macro Steps when Running Terraform")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//Run this to download cloud-specific plugins or when in a new directory\nterraform init\n\n//This command actually executes the code\nterraform apply\n\n//Destroy created resources\nterraform destroy\n\n//Shows the plan\nterraform plan\n")])])]),t("h3",{attrs:{id:"variables-deep-dive"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variables-deep-dive"}},[e._v("#")]),e._v(" Variables Deep Dive")]),e._v(" "),t("p",[e._v("Use variables for elements that might change or to make it easier to reuse terraform files.")]),e._v(" "),t("p",[e._v("Instead of having:")]),e._v(" "),t("p",[t("code",[e._v("instance.tf")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('provider "aws" {\n    access_key = "ACCESS_KEY"\n    secret_key = "SECRET_KEY"\n    region = "us-east-1"\n}\n\nresource "aws_instance" "example" {\n    ami = "ami_id_here"\n    instance_type = "t2.micro"\n}\n')])])]),t("p",[e._v("better to split the files to:")]),e._v(" "),t("p",[t("code",[e._v("provider.tf")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('provider "aws" {\n    access_key = "${var.ACCESS_KEY}"\n    secret_key = "${var.AWS_SECRET_KEY}"\n    region = "${var.AWS_REGION}"\n}\n')])])]),t("p",[t("code",[e._v("vars.tf")])]),e._v(" "),t("p",[e._v("Here we declare the variablaes")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('variable "ACCESS_KEY" {}\nvariable "AWS_SECRET_KEY" {}\nvariable "AWS_REGION" {\n    default = "eu-west-1"\n}\nvariable "AMIS" {\n    type = "map"\n    default = {\n        us-east-1 = "ami-xxx1"\n        us-west-2 = "ami-xxx2"\n        eu-west-1 = "ami-xxx3"\n    }\n}\n')])])]),t("p",[t("code",[e._v("terraform.tfvars")])]),e._v(" "),t("p",[e._v("This one HAS to be included in "),t("code",[e._v(".gitignore")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ACCESS_KEY = ""\nAWS_SECRET_KEY = ""\n')])])]),t("p",[t("code",[e._v("instance.tf")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('resource "aws_instance" "example" {\n    ami = "${lookup(var.AMIS,var.AWS_REGION)}"\n    instance_type = "t2.micro"\n}\n')])])]),t("h3",{attrs:{id:"software-privision-basics"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#software-privision-basics"}},[e._v("#")]),e._v(" Software Privision Basics")]),e._v(" "),t("p",[e._v("Ways to provision software:")]),e._v(" "),t("ol",[t("li",[e._v("Buold own custom AMI and bundle Software\n"),t("ul",[t("li",[e._v("Packer")])])]),e._v(" "),t("li",[e._v("Boot Standard AMI, and then install software\n"),t("ul",[t("li",[e._v("Using file uploads")]),e._v(" "),t("li",[e._v("Using remote exec")]),e._v(" "),t("li",[e._v("Use Chef (integrated with terraform), Puppet, Ansible")])])])]),e._v(" "),t("p",[t("strong",[e._v("File Uploads")])]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('provisioner "file" {\n    source = "app.conf"\n    destination = "/etc/myapp.conf"\n}\n')])])]),t("p",[e._v("File uploads can be used in conjunction with "),t("code",[e._v("remote-exec")]),e._v("\nWe might have to override SSH defaults")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('provisioner "file" {\n    source = "app.conf"\n    destination = "/etc/myapp.conf"\n    connection {\n        user = "${var.instance_username}"\n        password = "${var.instance_password}"\n    }\n}\n')])])]),t("p",[e._v("To use SSH keypairs:")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('resource "aws_key_pair" "mykey" {\n    key_name = "mykey"\n    public_key = "ssh-rsa my-public-key"\n}\n\nresource "aws_instance" "example" {\n    ami = "${lookup(var.AMIS, var.AWS_REGION)}"\n    instance_type = "t2.micro"\n    key_name = "${aws_key_pair.mykey.key_name}"\n}\nprovisioner "file" {\n    source = "app.conf"\n    destination = "/opt/script.sh"\n    connection {\n        user = "${var.instance_username}"\n        private_key = "${file(${var.path_to_private_key})}"\n    }\n}\n\nAfter uploading a script, we need to execute it\n\n```terraform\nprovisioner "remote-exec" {\n    inline = [\n        "chmod +x /opt/script.sh",\n        "/opt/script.sh arguments"\n    ]\n}\n')])])]),t("h3",{attrs:{id:"output"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#output"}},[e._v("#")]),e._v(" Output")]),e._v(" "),t("p",[e._v("Terraform keeps attributes of resources created. They can be queried using the keyword "),t("code",[e._v("output")]),e._v(".")]),e._v(" "),t("div",{staticClass:"language-terraform extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('resource "aws_instance" "example" {\n    ami = ""\n    instance_type=""\n}\n output "ip" {\n     value = "${aws_instance.example.public_ip}"\n }\n')])])]),t("p",[e._v("Attributes can also be used in a script.")])])}),[],!1,null,null,null);a.default=s.exports}}]);