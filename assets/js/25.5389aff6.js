(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{383:function(e,t,o){"use strict";o.r(t);var s=o(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"dns-fundamentals"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#dns-fundamentals"}},[e._v("#")]),e._v(" DNS Fundamentals")]),e._v(" "),o("p",[o("strong",[e._v("Main Concepts")])]),e._v(" "),o("ul",[o("li",[o("em",[e._v("Root Hints File:")]),e._v(" Contains list of all Root Servers -> Provided by the OS")]),e._v(" "),o("li",[o("em",[e._v("Root Server:")]),e._v(" Hosts the DNS root zone")]),e._v(" "),o("li",[o("em",[e._v("Root Zone:")]),e._v(" Points the TLD authorative servers (.com/.uk/etc)")])]),e._v(" "),o("h1",{attrs:{id:"route-53"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#route-53"}},[e._v("#")]),e._v(" Route 53")]),e._v(" "),o("p",[e._v("Managed DNS, a collection of rules & records understand how to reach a server.")]),e._v(" "),o("p",[e._v("Common records for DNS:")]),e._v(" "),o("ol",[o("li",[e._v("A: Hostname to IPv4")]),e._v(" "),o("li",[e._v("AAAA: Hostname to IPv6")]),e._v(" "),o("li",[e._v("CNAME: Hostname to hostname")]),e._v(" "),o("li",[e._v("Alias: Hostname to AWS Resource")])]),e._v(" "),o("p",[o("strong",[e._v("Product Basics")])]),e._v(" "),o("ol",[o("li",[o("em",[e._v("Register domains:")]),e._v(" Has relationship with all major domain registries (.io/.com/.net/etc).")]),e._v(" "),o("li",[o("em",[e._v("Host Zones, managed nameservers:")])])]),e._v(" "),o("p",[o("strong",[e._v("TTL")])]),e._v(" "),o("p",[e._v("Way for web browsers to cache the response of a DNS query. Has the value of the DNS for a period of time.")]),e._v(" "),o("p",[o("strong",[e._v("CNAME vs Alias")])]),e._v(" "),o("p",[e._v("AWS resources expose an AWS Hostname e.g. ELB")]),e._v(" "),o("p",[e._v("CNAME:")]),e._v(" "),o("ul",[o("li",[e._v("Points a hostname to any other hostname (app.mydomain.com -> blabla.anything.com)")]),e._v(" "),o("li",[e._v("Only works for "),o("em",[e._v("NON ROOT DOMAINS")]),e._v(" (something.domain.com)")])]),e._v(" "),o("p",[e._v("ALIAS:")]),e._v(" "),o("ul",[o("li",[e._v("Points a hostname to an AWS resource (app.mydomain.com -> blabla.amazonaws.com)")]),e._v(" "),o("li",[e._v("Works for "),o("em",[e._v("ROOT")]),e._v(" & "),o("em",[e._v("NON ROOT")]),e._v(" domains")]),e._v(" "),o("li",[e._v("Free")]),e._v(" "),o("li",[e._v("Native heath check")])]),e._v(" "),o("h2",{attrs:{id:"routing-policy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#routing-policy"}},[e._v("#")]),e._v(" Routing Policy")]),e._v(" "),o("p",[o("strong",[e._v("Simple Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Cannot have health checks")]),e._v(" "),o("li",[e._v("Redirects to a single resource")]),e._v(" "),o("li",[e._v("If multiple IP Addresses are present, they are returned at random")])]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/r53_simple_routing.png",alt:"r53_simple_routing"}})]),e._v(" "),o("p",[o("strong",[e._v("Weighted Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Controls the % of requests that go a specific endpoint")])]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/r53_weight_routing.png",alt:"r53_weight_routing"}})]),e._v(" "),o("p",[o("strong",[e._v("Latency Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Redirects to the server with the least latency from User to AWS resource.")])]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/r53_latency_routing.png",alt:"r53_latency_routing"}})]),e._v(" "),o("p",[o("strong",[e._v("Failover Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Based on health checks and status of instances.")])]),e._v(" "),o("p",[o("img",{attrs:{src:"/images/r53_failover_routing.png",alt:"r53_failover_routing"}})]),e._v(" "),o("p",[o("strong",[e._v("Geolocation Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Based on user's location")]),e._v(" "),o("li",[e._v("Requires a default's location")])]),e._v(" "),o("p",[o("strong",[e._v("Geoproximity Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Routes based on geographic location of users and resources")]),e._v(" "),o("li",[e._v("Shift traffic based on "),o("code",[e._v("bias")])]),e._v(" "),o("li",[e._v("To change the size of the geographic region, specify the "),o("code",[e._v("bias")]),e._v(" value:\n"),o("ul",[o("li",[e._v("1 to 99 -> expand")]),e._v(" "),o("li",[e._v("-1 to -99 -> shrink")])])]),e._v(" "),o("li",[e._v("Resources can be:\n"),o("ul",[o("li",[e._v("AWS Resources")]),e._v(" "),o("li",[e._v("Non-AWS Resources")])])])]),e._v(" "),o("p",[o("strong",[e._v("Multi Value Routing Policy")])]),e._v(" "),o("ul",[o("li",[e._v("Routing traffic to multipe resources")]),e._v(" "),o("li",[e._v("Associate Route53 health checks with records")]),e._v(" "),o("li",[e._v("Up to 8 healthy records are returned for each multi value query")])]),e._v(" "),o("h2",{attrs:{id:"health-checks"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#health-checks"}},[e._v("#")]),e._v(" Health Checks")]),e._v(" "),o("ul",[o("li",[e._v("Fails if it X health checks failed")]),e._v(" "),o("li",[e._v("Healthy if it passes X health checks in a row")]),e._v(" "),o("li",[e._v("Default check interval: 30s (can set to 10s)")]),e._v(" "),o("li",[e._v("Can have HTTP/HTTPS/TCP (No SSL)\nHealth check can be linked to DNS queries")])])])}),[],!1,null,null,null);t.default=a.exports}}]);